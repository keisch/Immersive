{
  "version": 3,
  "sources": ["../../node_modules/embla-carousel-class-names/src/components/Options.ts", "../../node_modules/embla-carousel-class-names/src/components/utils.ts", "../../node_modules/embla-carousel-class-names/src/components/ClassNames.ts"],
  "sourcesContent": ["import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  snapped: string\n  inView: string\n  draggable: string\n  dragging: string\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  snapped: 'is-snapped',\n  inView: 'is-in-view',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging'\n}\n", "export function removeClass(node: HTMLElement, className: string): void {\n  if (!node || !className) return\n  const { classList } = node\n  if (classList.contains(className)) classList.remove(className)\n}\n\nexport function addClass(node: HTMLElement, className: string): void {\n  if (!node || !className) return\n  const { classList } = node\n  if (!classList.contains(className)) classList.add(className)\n}\n\nexport function nodeListToArray(nodeList: NodeListOf<Element>): HTMLElement[] {\n  return <HTMLElement[]>Array.from(nodeList)\n}\n", "import { defaultOptions, OptionsType } from './Options'\nimport { nodeListToArray, addClass, removeClass } from './utils'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport { EmblaCarouselType, EmblaEventType } from 'embla-carousel'\nimport { OptionsHandlerType } from 'embla-carousel/components/OptionsHandler'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    classNames?: ClassNamesType\n  }\n}\n\nexport type ClassNamesType = CreatePluginType<{}, OptionsType>\n\nexport type ClassNamesOptionsType = ClassNamesType['options']\n\nfunction ClassNames(userOptions: ClassNamesOptionsType = {}): ClassNamesType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let root: HTMLElement\n  let slides: HTMLElement[]\n  const selectedEvents: EmblaEventType[] = ['select']\n  const draggingEvents: EmblaEventType[] = ['pointerDown', 'pointerUp']\n  const inViewEvents: EmblaEventType[] = ['slidesInView']\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, ClassNames.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    root = emblaApi.rootNode()\n    slides = emblaApi.slideNodes()\n    const isDraggable = !!emblaApi.internalEngine().options.watchDrag\n\n    if (isDraggable) {\n      addClass(root, options.draggable)\n    }\n    if (options.dragging) {\n      draggingEvents.forEach((evt) => emblaApi.on(evt, toggleDraggingClass))\n    }\n    if (options.snapped) {\n      selectedEvents.forEach((evt) => emblaApi.on(evt, toggleSnappedClasses))\n      toggleSnappedClasses()\n    }\n    if (options.inView) {\n      inViewEvents.forEach((evt) => emblaApi.on(evt, toggleInViewClasses))\n      toggleInViewClasses()\n    }\n  }\n\n  function destroy(): void {\n    removeClass(root, options.draggable)\n    draggingEvents.forEach((evt) => emblaApi.off(evt, toggleDraggingClass))\n    selectedEvents.forEach((evt) => emblaApi.off(evt, toggleSnappedClasses))\n    inViewEvents.forEach((evt) => emblaApi.off(evt, toggleInViewClasses))\n    slides.forEach((slide) => removeClass(slide, options.snapped))\n  }\n\n  function toggleDraggingClass(\n    _: EmblaCarouselType,\n    evt: EmblaEventType\n  ): void {\n    if (evt === 'pointerDown') addClass(root, options.dragging)\n    else removeClass(root, options.dragging)\n  }\n\n  function toggleSlideClasses(slideIndexes: number[], className: string): void {\n    const container = emblaApi.containerNode()\n    const slideNodeList = container.querySelectorAll(`.${className}`)\n    const removeClassSlides = nodeListToArray(slideNodeList)\n\n    removeClassSlides.forEach((slide) => removeClass(slide, className))\n    slideIndexes.forEach((index) => addClass(slides[index], className))\n  }\n\n  function toggleSnappedClasses(): void {\n    const { slideRegistry } = emblaApi.internalEngine()\n    const slideIndexes = slideRegistry[emblaApi.selectedScrollSnap()]\n    toggleSlideClasses(slideIndexes, options.snapped)\n  }\n\n  function toggleInViewClasses(): void {\n    const slideIndexes = emblaApi.slidesInView()\n    toggleSlideClasses(slideIndexes, options.inView)\n  }\n\n  const self: ClassNamesType = {\n    name: 'classNames',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\nClassNames.globalOptions = <ClassNamesOptionsType | undefined>undefined\n\nexport default ClassNames\n"],
  "mappings": "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",
  "names": ["defaultOptions", "active", "breakpoints", "snapped", "inView", "draggable", "dragging", "removeClass", "node", "className", "classList", "contains", "remove", "addClass", "add", "nodeListToArray", "nodeList", "Array", "from", "ClassNames", "userOptions", "options", "emblaApi", "root", "slides", "selectedEvents", "draggingEvents", "inViewEvents", "init", "emblaApiInstance", "optionsHandler", "mergeOptions", "optionsAtMedia", "optionsBase", "globalOptions", "allOptions", "rootNode", "slideNodes", "isDraggable", "internalEngine", "watchDrag", "forEach", "evt", "on", "toggleDraggingClass", "toggleSnappedClasses", "toggleInViewClasses", "destroy", "off", "slide", "_", "toggleSlideClasses", "slideIndexes", "container", "containerNode", "slideNodeList", "querySelectorAll", "removeClassSlides", "index", "slideRegistry", "selectedScrollSnap", "slidesInView", "self", "name", "undefined"]
}
